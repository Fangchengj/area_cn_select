- random = "area_select_cn_#{SecureRandom.hex}"
- css = theme_classes(theme)
%div{ :class=>"area_select_cn #{random} clearfix"}
  - if f.is_a?(AreaSelectCn::FormBuilder)
    = f.label attr,:class=>"custom-label"
  = f.hidden_field attr, :class => "select-value"
  - [:province,:city,:district].each do |scope|
    - selected_scope = local_assigns["selected_#{scope}".intern]
    - selected_scopes = local_assigns["selected_#{scope.to_s.pluralize}".intern]
    %div{:class=>"#{css[:selectContainer]} #{scope} "}
      = link_to "javascript:void(0);",:class=>"#{btn_class} #{css[:selectPromptContainer]} clearfix" do
        - if selected_scope
          %span.select-content{:data => {:value => selected_scope[1]}} 
            = selected_scope[0] 
        - else
          %span.select-content
            = scope_prompts[scope]
        %span{:class => css[:caret]}
  
      %ul{:class => css[:selectOptsContainer]}
        %li{:class => selected(selected_scope,nil), :data => {:value => ""}}
          = link_to scope_prompts[scope], "javascript:void(0);"
        - selected_scopes.map do |scope|
          %li{ :class => selected(scope[1], selected_scope && selected_scope[1]),
            :data => {:value => scope[1]}}
            = link_to  scope[0], "javascript:void(0);"

:javascript
  jQuery.District(".#{random}",{
    selectContainer:        '.#{css[:selectContainer]}',
    selectOptsContainer:    '.#{css[:selectOptsContainer]}',
    selectPromptContainer:  '.#{css[:selectPromptContainer]}',
    onChange: function(code){
      $(".#{random} .select-value").val(code);
    }
  })

